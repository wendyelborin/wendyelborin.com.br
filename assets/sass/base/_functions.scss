/*********************************************************************
*  =Functions
*********************************************************************/

// Returns unitless number
@function remove-unit($number) {
  $unit: unit($number);
  $one: 1;

  @if $unit == "px" { $one: 1px; }
  @if $unit == "em" { $one: 1em; }
  @if $unit == "%"  { $one: 1%;  }
  @return $number / $one;
  
}

// Returns flexible value using `target ÷ context` formula.
// Returns `em` by default, accepts `%` as format.
@function flex($target, $context, $unit: "em") {
  $size: remove-unit($target) / remove-unit($context);

  @if $unit == "em" { @return #{$size}em; }
  @if $unit == "%" { @return percentage($size); }
}

// Alias to `flex` function, using `%` as format.
@function perc($target, $context: $GRID_WIDTH) {
  @return flex($target, $context, "%");
}

// Alias to `flex` function, using `em` as format.
@function em($target, $context: $PROJECT_FONT_SIZE) {
  @return flex($target, $context, "em");
}

@function width_from_columns($columns) {
  @return ($columns * $GRID_COLUMN_WIDTH) + (($columns - 1) * $GRID_GUTTER);
}
